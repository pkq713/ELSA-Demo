# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _compcore
else:
    import _compcore

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _compcore.delete_SwigPyIterator

    def value(self):
        return _compcore.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _compcore.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _compcore.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _compcore.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _compcore.SwigPyIterator_equal(self, x)

    def copy(self):
        return _compcore.SwigPyIterator_copy(self)

    def next(self):
        return _compcore.SwigPyIterator_next(self)

    def __next__(self):
        return _compcore.SwigPyIterator___next__(self)

    def previous(self):
        return _compcore.SwigPyIterator_previous(self)

    def advance(self, n):
        return _compcore.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _compcore.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _compcore.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _compcore.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _compcore.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _compcore.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _compcore.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _compcore:
_compcore.SwigPyIterator_swigregister(SwigPyIterator)

class VectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _compcore.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _compcore.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _compcore.VectorDouble___bool__(self)

    def __len__(self):
        return _compcore.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _compcore.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _compcore.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _compcore.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _compcore.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _compcore.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _compcore.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _compcore.VectorDouble_pop(self)

    def append(self, x):
        return _compcore.VectorDouble_append(self, x)

    def empty(self):
        return _compcore.VectorDouble_empty(self)

    def size(self):
        return _compcore.VectorDouble_size(self)

    def swap(self, v):
        return _compcore.VectorDouble_swap(self, v)

    def begin(self):
        return _compcore.VectorDouble_begin(self)

    def end(self):
        return _compcore.VectorDouble_end(self)

    def rbegin(self):
        return _compcore.VectorDouble_rbegin(self)

    def rend(self):
        return _compcore.VectorDouble_rend(self)

    def clear(self):
        return _compcore.VectorDouble_clear(self)

    def get_allocator(self):
        return _compcore.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _compcore.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _compcore.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        _compcore.VectorDouble_swiginit(self, _compcore.new_VectorDouble(*args))

    def push_back(self, x):
        return _compcore.VectorDouble_push_back(self, x)

    def front(self):
        return _compcore.VectorDouble_front(self)

    def back(self):
        return _compcore.VectorDouble_back(self)

    def assign(self, n, x):
        return _compcore.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _compcore.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _compcore.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _compcore.VectorDouble_reserve(self, n)

    def capacity(self):
        return _compcore.VectorDouble_capacity(self)
    __swig_destroy__ = _compcore.delete_VectorDouble

# Register VectorDouble in _compcore:
_compcore.VectorDouble_swigregister(VectorDouble)

class VectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _compcore.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _compcore.VectorInt___nonzero__(self)

    def __bool__(self):
        return _compcore.VectorInt___bool__(self)

    def __len__(self):
        return _compcore.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _compcore.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _compcore.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _compcore.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _compcore.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _compcore.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _compcore.VectorInt___setitem__(self, *args)

    def pop(self):
        return _compcore.VectorInt_pop(self)

    def append(self, x):
        return _compcore.VectorInt_append(self, x)

    def empty(self):
        return _compcore.VectorInt_empty(self)

    def size(self):
        return _compcore.VectorInt_size(self)

    def swap(self, v):
        return _compcore.VectorInt_swap(self, v)

    def begin(self):
        return _compcore.VectorInt_begin(self)

    def end(self):
        return _compcore.VectorInt_end(self)

    def rbegin(self):
        return _compcore.VectorInt_rbegin(self)

    def rend(self):
        return _compcore.VectorInt_rend(self)

    def clear(self):
        return _compcore.VectorInt_clear(self)

    def get_allocator(self):
        return _compcore.VectorInt_get_allocator(self)

    def pop_back(self):
        return _compcore.VectorInt_pop_back(self)

    def erase(self, *args):
        return _compcore.VectorInt_erase(self, *args)

    def __init__(self, *args):
        _compcore.VectorInt_swiginit(self, _compcore.new_VectorInt(*args))

    def push_back(self, x):
        return _compcore.VectorInt_push_back(self, x)

    def front(self):
        return _compcore.VectorInt_front(self)

    def back(self):
        return _compcore.VectorInt_back(self)

    def assign(self, n, x):
        return _compcore.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _compcore.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _compcore.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _compcore.VectorInt_reserve(self, n)

    def capacity(self):
        return _compcore.VectorInt_capacity(self)
    __swig_destroy__ = _compcore.delete_VectorInt

# Register VectorInt in _compcore:
_compcore.VectorInt_swigregister(VectorInt)

class MatrixDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _compcore.MatrixDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _compcore.MatrixDouble___nonzero__(self)

    def __bool__(self):
        return _compcore.MatrixDouble___bool__(self)

    def __len__(self):
        return _compcore.MatrixDouble___len__(self)

    def __getslice__(self, i, j):
        return _compcore.MatrixDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _compcore.MatrixDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _compcore.MatrixDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _compcore.MatrixDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _compcore.MatrixDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _compcore.MatrixDouble___setitem__(self, *args)

    def pop(self):
        return _compcore.MatrixDouble_pop(self)

    def append(self, x):
        return _compcore.MatrixDouble_append(self, x)

    def empty(self):
        return _compcore.MatrixDouble_empty(self)

    def size(self):
        return _compcore.MatrixDouble_size(self)

    def swap(self, v):
        return _compcore.MatrixDouble_swap(self, v)

    def begin(self):
        return _compcore.MatrixDouble_begin(self)

    def end(self):
        return _compcore.MatrixDouble_end(self)

    def rbegin(self):
        return _compcore.MatrixDouble_rbegin(self)

    def rend(self):
        return _compcore.MatrixDouble_rend(self)

    def clear(self):
        return _compcore.MatrixDouble_clear(self)

    def get_allocator(self):
        return _compcore.MatrixDouble_get_allocator(self)

    def pop_back(self):
        return _compcore.MatrixDouble_pop_back(self)

    def erase(self, *args):
        return _compcore.MatrixDouble_erase(self, *args)

    def __init__(self, *args):
        _compcore.MatrixDouble_swiginit(self, _compcore.new_MatrixDouble(*args))

    def push_back(self, x):
        return _compcore.MatrixDouble_push_back(self, x)

    def front(self):
        return _compcore.MatrixDouble_front(self)

    def back(self):
        return _compcore.MatrixDouble_back(self)

    def assign(self, n, x):
        return _compcore.MatrixDouble_assign(self, n, x)

    def resize(self, *args):
        return _compcore.MatrixDouble_resize(self, *args)

    def insert(self, *args):
        return _compcore.MatrixDouble_insert(self, *args)

    def reserve(self, n):
        return _compcore.MatrixDouble_reserve(self, n)

    def capacity(self):
        return _compcore.MatrixDouble_capacity(self)
    __swig_destroy__ = _compcore.delete_MatrixDouble

# Register MatrixDouble in _compcore:
_compcore.MatrixDouble_swigregister(MatrixDouble)

class MatrixInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _compcore.MatrixInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _compcore.MatrixInt___nonzero__(self)

    def __bool__(self):
        return _compcore.MatrixInt___bool__(self)

    def __len__(self):
        return _compcore.MatrixInt___len__(self)

    def __getslice__(self, i, j):
        return _compcore.MatrixInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _compcore.MatrixInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _compcore.MatrixInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _compcore.MatrixInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _compcore.MatrixInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _compcore.MatrixInt___setitem__(self, *args)

    def pop(self):
        return _compcore.MatrixInt_pop(self)

    def append(self, x):
        return _compcore.MatrixInt_append(self, x)

    def empty(self):
        return _compcore.MatrixInt_empty(self)

    def size(self):
        return _compcore.MatrixInt_size(self)

    def swap(self, v):
        return _compcore.MatrixInt_swap(self, v)

    def begin(self):
        return _compcore.MatrixInt_begin(self)

    def end(self):
        return _compcore.MatrixInt_end(self)

    def rbegin(self):
        return _compcore.MatrixInt_rbegin(self)

    def rend(self):
        return _compcore.MatrixInt_rend(self)

    def clear(self):
        return _compcore.MatrixInt_clear(self)

    def get_allocator(self):
        return _compcore.MatrixInt_get_allocator(self)

    def pop_back(self):
        return _compcore.MatrixInt_pop_back(self)

    def erase(self, *args):
        return _compcore.MatrixInt_erase(self, *args)

    def __init__(self, *args):
        _compcore.MatrixInt_swiginit(self, _compcore.new_MatrixInt(*args))

    def push_back(self, x):
        return _compcore.MatrixInt_push_back(self, x)

    def front(self):
        return _compcore.MatrixInt_front(self)

    def back(self):
        return _compcore.MatrixInt_back(self)

    def assign(self, n, x):
        return _compcore.MatrixInt_assign(self, n, x)

    def resize(self, *args):
        return _compcore.MatrixInt_resize(self, *args)

    def insert(self, *args):
        return _compcore.MatrixInt_insert(self, *args)

    def reserve(self, n):
        return _compcore.MatrixInt_reserve(self, n)

    def capacity(self):
        return _compcore.MatrixInt_capacity(self)
    __swig_destroy__ = _compcore.delete_MatrixInt

# Register MatrixInt in _compcore:
_compcore.MatrixInt_swigregister(MatrixInt)


def test():
    return _compcore.test()

def calc_LA(arg1, arg2, arg3):
    return _compcore.calc_LA(arg1, arg2, arg3)
class LSA_Data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max_shift = property(_compcore.LSA_Data_max_shift_get, _compcore.LSA_Data_max_shift_set)
    X = property(_compcore.LSA_Data_X_get, _compcore.LSA_Data_X_set)
    Y = property(_compcore.LSA_Data_Y_get, _compcore.LSA_Data_Y_set)

    def __init__(self, *args):
        _compcore.LSA_Data_swiginit(self, _compcore.new_LSA_Data(*args))

    def assign(self, arg2, arg3, arg4):
        return _compcore.LSA_Data_assign(self, arg2, arg3, arg4)
    __swig_destroy__ = _compcore.delete_LSA_Data

# Register LSA_Data in _compcore:
_compcore.LSA_Data_swigregister(LSA_Data)

class LSA_Result(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    score = property(_compcore.LSA_Result_score_get, _compcore.LSA_Result_score_set)
    trace = property(_compcore.LSA_Result_trace_get, _compcore.LSA_Result_trace_set)

    def __init__(self):
        _compcore.LSA_Result_swiginit(self, _compcore.new_LSA_Result())
    __swig_destroy__ = _compcore.delete_LSA_Result

# Register LSA_Result in _compcore:
_compcore.LSA_Result_swigregister(LSA_Result)


def DP_lsa(arg1, arg2):
    return _compcore.DP_lsa(arg1, arg2)
class LLA_Data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max_shift = property(_compcore.LLA_Data_max_shift_get, _compcore.LLA_Data_max_shift_set)
    X = property(_compcore.LLA_Data_X_get, _compcore.LLA_Data_X_set)
    Y = property(_compcore.LLA_Data_Y_get, _compcore.LLA_Data_Y_set)
    Z = property(_compcore.LLA_Data_Z_get, _compcore.LLA_Data_Z_set)

    def __init__(self, *args):
        _compcore.LLA_Data_swiginit(self, _compcore.new_LLA_Data(*args))
    __swig_destroy__ = _compcore.delete_LLA_Data

# Register LLA_Data in _compcore:
_compcore.LLA_Data_swigregister(LLA_Data)

class LLA_Result(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    score = property(_compcore.LLA_Result_score_get, _compcore.LLA_Result_score_set)
    trace = property(_compcore.LLA_Result_trace_get, _compcore.LLA_Result_trace_set)

    def __init__(self):
        _compcore.LLA_Result_swiginit(self, _compcore.new_LLA_Result())
    __swig_destroy__ = _compcore.delete_LLA_Result

# Register LLA_Result in _compcore:
_compcore.LLA_Result_swigregister(LLA_Result)



